import React, { useState, useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { AnalysisResult } from "../services/api"; // Adjust path
import Box from "@mui/material/Box";
import Grid from "@mui/material/Grid";
import Paper from "@mui/material/Paper";
import Typography from "@mui/material/Typography";
import Chip from "@mui/material/Chip";
import Card from "@mui/material/Card";
import CardMedia from "@mui/material/CardMedia";
import CardContent from "@mui/material/CardContent";
import CardActionArea from "@mui/material/CardActionArea";
import Alert from "@mui/material/Alert";
import Tooltip from "@mui/material/Tooltip";
import ImageModal from "../components/ImageModal"; // Adjust path
import InfoOutlinedIcon from "@mui/icons-material/InfoOutlined";

const ResultsPage: React.FC = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const [result, setResult] = useState<AnalysisResult | null>(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [modalImage, setModalImage] = useState<{
    url: string;
    alt: string;
  } | null>(null);

  useEffect(() => {
    // Check if state was passed correctly
    if (location.state && location.state.analysisResult) {
      const analysisData = location.state.analysisResult as AnalysisResult;
      setResult(analysisData);

      // Clean up location state after using it (optional but good practice)
      // navigate(location.pathname, { replace: true, state: {} }); // Be careful with this if user might refresh
    } else {
      // Redirect back to home or show an error if no result data is found
      console.warn("No analysis result found in location state. Redirecting.");
      navigate("/");
    }

    // Cleanup function for Blob URL when component unmounts
    return () => {
      if (
        result?.originalImageUrl &&
        result.originalImageUrl.startsWith("blob:")
      ) {
        URL.revokeObjectURL(result.originalImageUrl);
        console.log(
          "Revoked Blob URL on ResultsPage unmount:",
          result.originalImageUrl
        );
      }
    };
    // Add location.state to dependencies? No, we only want to run this once on mount based on initial state.
    // Add result to dependencies to handle the cleanup correctly when result changes (though it shouldn't change after mount here).
  }, [location, navigate, result?.originalImageUrl]); // Include result?.originalImageUrl for cleanup dependency

  const handleOpenModal = (imageUrl: string, altText: string) => {
    setModalImage({ url: imageUrl, alt: altText });
    setModalOpen(true);
  };

  const handleCloseModal = () => {
    setModalOpen(false);
    setModalImage(null);
  };

  const getChipColor = (
    prediction: AnalysisResult["prediction"]
  ): "success" | "warning" | "error" | "info" | "default" => {
    switch (prediction) {
      case "Normal":
        return "success";
      case "Mild":
        return "info";
      case "Moderate":
        return "warning";
      case "Severe":
        return "error";
      case "PDR":
        return "error"; // Proliferative DR is severe
      default:
        return "default";
    }
  };

  if (!result) {
    // Optional: Show a loading spinner or message while state is being processed
    // Or rely on the redirect logic in useEffect
    return <Typography>Loading results...</Typography>;
  }

  return (
    <Box sx={{ flexGrow: 1 }}>
      <Typography variant="h4" gutterBottom>
        Analysis Results
      </Typography>

      {/* Prediction and Confidence */}
      <Paper
        elevation={2}
        sx={{
          p: 2,
          mb: 3,
          display: "flex",
          alignItems: "center",
          flexWrap: "wrap",
          gap: 2,
        }}
      >
        <Typography variant="h6" component="span" sx={{ mr: 2 }}>
          Prediction:
        </Typography>
        <Tooltip title={`Predicted stage: ${result.prediction}`}>
          <Chip
            label={result.prediction}
            color={getChipColor(result.prediction)}
            size="medium"
            sx={{ fontWeight: "bold", fontSize: "1rem" }}
          />
        </Tooltip>
        <Typography
          variant="h6"
          component="span"
          sx={{ mr: 2, ml: { xs: 0, sm: 3 } }}
        >
          Confidence:
        </Typography>
        <Tooltip
          title={`Model confidence score: ${Math.round(
            result.confidence * 100
          )}%`}
        >
          <Chip
            label={`${Math.round(result.confidence * 100)}%`}
            variant="outlined"
            size="medium"
          />
        </Tooltip>
        <Tooltip title="This prediction is generated by an AI model and should be reviewed by a qualified medical professional. Confidence indicates the model's certainty.">
          <InfoOutlinedIcon color="action" sx={{ ml: 1, cursor: "help" }} />
        </Tooltip>
      </Paper>

      <Grid container spacing={3}>
        {/* Original Image */}
        <Grid item xs={12} md={6}>
          <Tooltip title="Click to view original image larger">
            
            <Card sx={{ height: "100%" }}>
              <CardActionArea
                onClick={() =>
                  handleOpenModal(
                    result.originalImageUrl,
                    "Original Fundus Image"
                  )
                }
              >
                <CardMedia
                  component="img"
                  // Adjust height as needed, or make it responsive
                  height="350"
                  image={result.originalImageUrl} // Use the Blob URL or backend URL
                  alt="Original Fundus Image"
                  sx={{ objectFit: "contain", p: 1, backgroundColor: "#eee" }} // contain ensures whole image visible
                />
                <CardContent>
                  <Typography gutterBottom variant="h6" component="div">
                    Original Image
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    The fundus image you uploaded for analysis.
                  </Typography>
                </CardContent>
              </CardActionArea>
            </Card>
          </Tooltip>
        </Grid>

        {/* Grad-CAM Image */}
        <Grid item xs={12} md={6}>
          <Tooltip title="Click to view Grad-CAM image larger">
            <Card sx={{ height: "100%" }}>
              <CardActionArea
                onClick={() =>
                  handleOpenModal(
                    result.gradCamImageUrl,
                    "Grad-CAM Highlighted Image"
                  )
                }
              >
                <CardMedia
                  component="img"
                  height="350"
                  image={result.gradCamImageUrl} // Use the placeholder or backend URL
                  alt="Grad-CAM Highlighted Image"
                  sx={{ objectFit: "contain", p: 1, backgroundColor: "#eee" }} // contain ensures whole image visible
                />
                <CardContent>
                  <Typography gutterBottom variant="h6" component="div">
                    Highlighted Image (Grad-CAM)
                    <Tooltip title="Gradient-weighted Class Activation Mapping (Grad-CAM) highlights the regions in the image that were most influential for the model's prediction. Warmer colors (red/yellow) indicate higher importance.">
                      <InfoOutlinedIcon
                        color="action"
                        sx={{
                          fontSize: "1rem",
                          ml: 0.5,
                          verticalAlign: "middle",
                          cursor: "help",
                        }}
                      />
                    </Tooltip>
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    Areas influencing the prediction are highlighted.
                  </Typography>
                </CardContent>
              </CardActionArea>
            </Card>
          </Tooltip>
        </Grid>

        {/* NLP Explanation */}
        <Grid item xs={12}>
          <Paper elevation={1} sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              Explanation
              <Tooltip title="This text is generated by an AI based on the Grad-CAM analysis and the prediction. It provides a possible interpretation of the highlighted features.">
                <InfoOutlinedIcon
                  color="action"
                  sx={{
                    fontSize: "1rem",
                    ml: 0.5,
                    verticalAlign: "middle",
                    cursor: "help",
                  }}
                />
              </Tooltip>
            </Typography>
            <Typography variant="body1" sx={{ whiteSpace: "pre-wrap" }}>
              {" "}
              {/* Preserve line breaks */}
              {result.explanation}
            </Typography>
          </Paper>
        </Grid>
      </Grid>

      {/* Image Modal */}
      {modalImage && (
        <ImageModal
          open={modalOpen}
          onClose={handleCloseModal}
          imageUrl={modalImage.url}
          altText={modalImage.alt}
        />
      )}
    </Box>
  );
};

export default ResultsPage;
